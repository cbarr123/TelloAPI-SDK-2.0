using System;
using Tello.Messaging;

namespace Tello.Controller
{
    internal sealed class Position : IPosition
    {
        public Position() { }

        public Position(IPosition position)
        {
            AltitudeAGLInCm = position.AltitudeAGLInCm;
            AltitudeMSLInCm = position.AltitudeMSLInCm;
            Heading = position.Heading;
            X = position.X;
            Y = position.Y;
        }


        private static double _altitudeDelta;
        public static void ZeroAltimeter(double barometricAltitudeInCm, double actualAltitudeInCm)
        {
            _altitudeDelta = actualAltitudeInCm - barometricAltitudeInCm;
        }

        /// <summary>
        /// requires mission pad to work 
        /// </summary>
        /// <param name="rawDroneState"></param>
        /// <param name="x">from estimated position tracker that works based on movement commands</param>
        /// <param name="y">from estimated position tracker that works based on movement commands</param>
        /// <param name="useMissionPad"></param>
        /// <returns>Position</returns>
        public static Position FromRawDroneState(IRawDroneState rawDroneState, int heading)
        {
            if (!rawDroneState.MissionPadDetected)
            {
                throw new ArgumentException($"{nameof(rawDroneState)}.{nameof(IRawDroneState.MissionPadDetected)} == false");
            }

            return new Position
            {
                AltitudeAGLInCm = rawDroneState.MissionPadZ,
                AltitudeMSLInCm = rawDroneState.BarometerInCm + _altitudeDelta,
                Heading = heading,
                X = rawDroneState.MissionPadX,
                Y = rawDroneState.MissionPadY,
            };
        }

        /// <summary>
        /// requires position tracker to work - ignores mission pad values
        /// </summary>
        /// <param name="rawDroneState"></param>
        /// <param name="x">from estimated position tracker that works based on movement commands</param>
        /// <param name="y">from estimated position tracker that works based on movement commands</param>
        /// <param name="useMissionPad"></param>
        /// <returns>Position</returns>
        public static Position FromRawDroneState(IRawDroneState rawDroneState, double x, double y, int heading)
        {
            return new Position
            {
                AltitudeAGLInCm = rawDroneState.HeightInCm,
                AltitudeMSLInCm = rawDroneState.BarometerInCm + _altitudeDelta,
                Heading = heading,
                X = x,
                Y = y,
            };
        }

        /// <summary>
        /// altitude - AGL stands for "above ground level" - values would typically be generated by a radar altimeter 
        /// value is measured in cm
        /// </summary>
        public int AltitudeAGLInCm { get; set; }

        /// <summary>
        /// altitude - MSL stands for "mean sea level" - values would typically be generated by a barometric pressure based altimeter
        /// for this value to be meaningful you have to zero the altimeter by calling the static method ZeroAltimeter 
        /// value is measured in cm
        /// </summary>
        public double AltitudeMSLInCm { get; set; }

        /// <summary>
        /// heading in degrees, from starting position, not from north
        /// </summary>
        public int Heading { get; set; }

        /// <summary>
        /// estimated X value relative to starting position based on movement commands, unless the Mission Pad is enabled, and then it's the X value based on drone's position relative to the Mission Pad 
        /// </summary>
        public double X { get; set; }

        /// <summary>
        /// estimated Y value relative to starting position based on movement commands, unless the Mission Pad is enabled, and then it's the Y value based on drone's position relative to the Mission Pad 
        /// </summary>
        public double Y { get; set; }

        public override string ToString()
        {
            var mslFt = AltitudeMSLInCm / 30.48;
            return $"X: {X.ToString("F2")} cm, Y: {Y.ToString("F2")} cm, MSL: {mslFt.ToString("F2")} ft, AGL: {AltitudeAGLInCm} cm, Hd: {Heading} deg, AD: {_altitudeDelta.ToString("F2")} cm";
        }
    }
}
